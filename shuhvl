#!/usr/bin/env bash
set -euo pipefail

# Who cares about the pick and shovel man
# Who cares if others use him as a tool
# It's part of the aristocratic plan
# To keep the poor man working like a mule.

# These are hard coded behavior directives.
readonly ONYMA=shuhvl
readonly OUR_DIR="${HOME}/.${ONYMA}"
readonly OUR_BINS="${OUR_DIR}/bin"
readonly MEMORY_FILE="${OUR_DIR}/memory"
readonly CONFIG_FILE="${OUR_DIR}/config"
readonly CONTROL_FILE="${OUR_DIR}/control"
readonly CURRENT_TIME="$(date +%s)"

COMPANION_CONTAINER=samrees/shuhvl:latest

# utility function, sees if element is in an array
contains() {
  a="${3}[@]"
  [[ "empty" == "${!a:-empty}" ]] && return 1
  for e in "${!a}"; do [[ "${e}" == "${1}" ]] && return 0; done
  return 1
}

# utility function, serializes a bash associative array (hash) into something that can be bash sourced
dump_assoc_array() {
  local -a 'keys=("${!'"$1"'[@]}")'
  echo declare -A $1
  echo $1=\( $(for k in "${keys[@]}"; do digger=$1["$k"]; echo [\"$k\"]=\"${!digger}\"; done) \)
}

# utility function, seralizes a normal bash array into something that can be bashed sourced
dump_array() {
  a="${1}[@]"
  [[ "empty" == "${!a:-empty}" ]] && echo $1=\( \) && return 0
  echo $1=\( $(for e in "${!a}"; do echo -n "\"$e\" "; done) \)
}

fingerprint_file() {
  local filename="${1}"
  b3sum "$filename" | cut -d " " -f1
}

# Aint no sumeshinee when she gonnnne
yeet() {
  "$@" & > /dev/null
  disown -h
}

dockerized_curl() {
  local url fingerprint download_dir local_filename local_target
  url="${1}"           # ex: https://someserver.tld/somepath
  download_dir="${2}"  # ex: ~/somepath (note lack of trailing slash)
  fingerprint="${3:-}" # ex: 8c5a80011215fdc9d0280eea4b7242c4 (128bit blake2b) or empty

  local_filename="${url##*/}"
  local_target="${download_dir}/${local_filename}"

  # return early if we have the right file
#  if [[ -f "${local_target}" && -n "${fingerprint}" ]]; then
#    [[ "$(docker run -i -v ${local_target}:/lt ${COMPANION_CONTAINER} bash -c "b2sum -l 128 /lt | cut -d'' -f1)" == "${fingerprint}" ]] && return 0
#  fi

#  curl --fail --silent "${url}" > "${local_target}"

#  if [[ "${fingerprint}" != "false" ]]; then
#    if [[ "$(shasum "${local_target}" | cut -d " " -f1)" == "${fingerprint}" ]]; then
#      update_after_hooks "${local_filename}"
#      return 0
#    else
#      echo "Error: SHA sum mismatch for "${url}", does not match "${fingerprint}", exiting immediately."
#      return 1
#    fi
#  fi
}

# hardcoded keep it sane
fetch_onyma() {
  github_relchan_downloader "$CONFIG_URL" "$ONYMA" "$RELEASE_CHANNEL" "${OUR_DIR}/${ONYMA}.new"
}
fetch_config_file() {
  github_relchan_downloader "$CONFIG_URL" "${ONYMA}_config.json" "$RELEASE_CHANNEL" "$CONFIG_FILE.new"
}

github_relchan_downloader() {
  local repo remote_file tag local_file
  repo="${1}"        # ex: samrees/shuhvl
  remote_file="${2}" # ex: testconfig.json
  tag="${3}"         # ex: stable
  local_file="${4}"  # ex: ~/somepath/testconfig.json

  status_code=$(etag_file_downloader "https://raw.githubusercontent.com/${repo}/${tag}/${remote_file}" "${local_file}")
}

# this relies on having a curl with a minimum version of 7.68
etag_file_downloader() {
  local url target etag_file etag_args
  url="${1}" # ex: https://raw.githubusercontent.com/samrees/shuhvl/test_rel/Dockerfile
  target="${2}"

  etag_file="${OUR_DIR}/$(basename ${target})_etag"

  # successfully comparing the etag file will cause it not to be downloaded,
  # not what we want in case of the target file being removed underneath us
  [[ -f "${target}" ]] || rm -f "${etag_file}"

  echo $(curl --etag-save "${etag_file}" --etag-compare "${etag_file}" -o "${target}" -s -w '%{http_code}' "${url}")
}

update_bash_var() {
  local target_key="${1}"  # ex: SUNDAY_TASK
  local target_val="${2}"  # ex: "yeet the rich"
  local state_file="${3}"  # ex: ~/notes/todo.txt

  if rg -q "^${target_key}=" "${state_file}"; then
    sd "^${target_key}=.+" "${target_key}=${target_val}" "${state_file}"
  else
    echo "${target_key}=${target_val}" >> "${state_file}"
  fi
}

# true if we're within our update time, false if we've exceeded it
check_update_time() {
  local key="${1}" # ex: self, config, somedocker:latest, w/e

  local memory_time_key=UPDATE_TIME_$(tr ':' '_' <<< ${key^^})
  local memory_ttl_key=UPDATE_TTL_$(tr ':' '_' <<< ${key^^})
  local memory_time=${!memory_time_key:-0}
  local memory_ttl=${!memory_ttl_key:-84600} # 23.5 hours praise her skiddo
  [[ ! $((CURRENT_TIME-memory_time)) -gt $memory_ttl ]]
}

# sets the latest update check time in our memory
bump_update_time() {
  local key="${1}" # ex: self, config, somedocker:latest, w/e

  local memory_time_key=UPDATE_TIME_$(tr ':' '_' <<< ${key^^})
  update_bash_var $memory_time_key "$(date +%s)" $MEMORY_FILE
}

acquire_missing_deps_switcher() {
  local dep installed_dependencies
  readarray -t dep_list <<< "$@"
  installed_dependencies=0

  # Brew based dependency getter. This function can expand
  # to support other things.
  if command -v brew &> /dev/null; then
    for dep in rg fd; do
      contains $dep in dep_list && brew install $dep
      let installed_dependencies+=1
    done
  fi

  if [[ $installed_dependencies -ne ${#dep_list[@]} ]]; then
    echo "We don't know how to install some dependencies: ${dep_list[@]}."
    echo "This is an error, please contact the maintainer of ${ONYMA}."
    exit 9
  fi
}

dependency_bootstrap() {
  local required_binaries missing_binaries

  if ! command -v docker &> /dev/null || ! docker ps &> /dev/null; then
    echo "Error: ${ONYMA} does not detect a running docker, please install or start docker."
    exit 5
  fi

  # welcome to 2020, we use better rust versions of grep and find and sed
  # also a much faster hash function
  required_binaries=(
    rg
    fd
    sd
    curl
    b3sum
  )
  missing_binaries=()

  for cmd in ${required_binaries[@]}; do
    command -v "$cmd" > /dev/null || missing_binaries+=( "$cmd" )
  done

  if [[ ${#missing_binaries[@]} -gt 0 ]]; then
    acquire_missing_deps_switcher ${missing_binaries[@]}
  fi
}

memory_bootstrap() {
  [[ -d "$OUR_DIR" ]]     || mkdir -p "$OUR_DIR"
  [[ -d "$OUR_BINS" ]]    || mkdir -p "$OUR_BINS"
  [[ -f "$MEMORY_FILE" ]] || touch "$MEMORY_FILE"
  source "$MEMORY_FILE"
}

operation_bootstrap() {
  local operational_vars opvar
  operational_vars=(
    CONFIG_URL
    RELEASE_CHANNEL
  )

  for opvar in "${operational_vars[@]}"; do
    if [[ -z "${!opvar:-}" ]]; then
      echo "$ONYMA is unintialized."
      installer
    fi
  done

  # We need certain files on the first run, but we also need to be prepared
  # for delayed, asynchronous updates to files outside this process, so thus the
  # kind of "drunk-discovering-new-things" style of this
  [[ -f "$CONFIG_FILE" ]] || fetch_config_file
  [[ -f "${CONFIG_FILE}.new" ]] && mv "${CONFIG_FILE}.new" "$CONFIG_FILE"

  [[ -f "$CONTROL_FILE" ]] || generate_control_file
  [[ "$(fingerprint_file "$CONFIG_FILE")" == "${CONFIG_FINGERPRINT:-}" ]] || generate_control_file

}

generate_control_file() {

  declare -A COMMAND_DISPATCH COMMAND_DESCRIPTIONS CONTAINER_MOUNT_CMDS CONTAINER_MOUNTS CONTAINER_ENV_CMDS CONTAINER_ENV_DYNAMIC

  jq '.containers[].name' < "$CONFIG_FILE" &>/dev/null
  if [[ $? -ne 0 ]]; then
    echo "ERROR: $CONFIG_FILE corrupted, exiting."
    exit 5
  fi

  local container_names container_tags
  readarray -t container_names <<< $(jq -r '.containers[].name' "$CONFIG_FILE")
  readarray -t container_tags  <<< $(jq -r '.containers[].tag' "$CONFIG_FILE")

  local index=0 name commands descriptions mounts m command tag envs env_plain env_regex
  for name in "${container_names[@]}"; do
    if [[ "$name" == "null" ]]; then
      let index+=1
      continue
    fi

    tag=${container_tags[$index]}
    [[ "$tag" == "null" ]] && tag="latest"

    if [[ "$(jq -r --arg i $index '.containers[$i|tonumber].commands' $CONFIG_FILE)" != "null" ]]; then
      readarray -t commands     <<< $(jq -r --arg i $index '.containers[$i|tonumber].commands[].name' $CONFIG_FILE)
      readarray -t descriptions <<< $(jq -r --arg i $index '.containers[$i|tonumber].commands[].description' $CONFIG_FILE)

      local command_index=0
      for command in "${commands[@]}"; do
        COMMAND_DISPATCH[$command]="${name}:${tag}"
        COMMAND_DESCRIPTIONS[$command]="${descriptions[$command_index]}"
        let command_index+=1
      done
    else
      let index+=1
      continue
    fi

    if [[ "$(jq -r --arg i $index '.containers[$i|tonumber].mounts' $CONFIG_FILE)" != "null" ]]; then
      readarray -t mounts     <<< $(jq -r --arg i $index '.containers[$i|tonumber].mounts[]' $CONFIG_FILE)

      CONTAINER_MOUNTS["${name}:${tag}"]="$(
        for m in "${mounts[@]}"; do
          echo $(cut -d ":" -f1 <<< $m)
        done
      )"

      CONTAINER_MOUNT_CMDS["${name}:${tag}"]="$(
        for m in "${mounts[@]}"; do
          echo --volume \'$m\'
        done
      )"
    fi

    if [[ "$(jq -r --arg i $index '.containers[$i|tonumber].envs' $CONFIG_FILE)" != "null" ]]; then
      readarray -t envs    <<< $(jq -r --arg i $index '.containers[$i|tonumber].envs[]' $CONFIG_FILE)

      envs_plain=()
      envs_regex=()
      for e in "${envs[@]}"; do
        if rg -q '^[a-zA-Z_]+[a-zA-Z0-9_]*$' <<< "$e"; then
          envs_plain+=( "$e" )
        else
          envs_regex+=( "$e" )
        fi
      done

      CONTAINER_ENV_CMDS["${name}:${tag}"]="$(
        for e in "${envs_plain[@]}"; do
          echo --env "$e"
        done
      )"

      CONTAINER_ENV_DYNAMIC["${name}:${tag}"]="$(
        for e in "${envs_regex[@]}"; do
          echo "$e"
        done
      )"
    fi

    let index+=1
  done

                                          > "$CONTROL_FILE"
  dump_assoc_array COMMAND_DISPATCH      >> "$CONTROL_FILE"
  dump_assoc_array COMMAND_DESCRIPTIONS  >> "$CONTROL_FILE"
  dump_assoc_array CONTAINER_MOUNTS      >> "$CONTROL_FILE"
  dump_assoc_array CONTAINER_MOUNT_CMDS  >> "$CONTROL_FILE"
  dump_assoc_array CONTAINER_ENV_CMDS    >> "$CONTROL_FILE"
  dump_assoc_array CONTAINER_ENV_DYNAMIC >> "$CONTROL_FILE"
  update_bash_var  CONFIG_FINGERPRINT "$(fingerprint_file "$CONFIG_FILE")" "$MEMORY_FILE"
}

dispatch_command() {
  local commands dockerurl dockerflags dockervolumes dockerenv e ee

  commands=( ${!COMMAND_DISPATCH[@]} )

  if contains "${1:-}" in commands; then
    dockerurl="${COMMAND_DISPATCH[${1}]}"
  else
    return 1
  fi

  # using --tty causes output to use CRLF line endings, which is problematic
  # when trying to handle the output programmatically. so we only request
  # a tty if both stdin _and_ stdout are already ttys.
  # https://github.com/moby/moby/issues/8513
  dockerflags+=( --rm --interactive )
  [[ -t 0 && -t 1 ]] && dockerflags+=( --tty )

  dockerenv+=(--env TMPDIR=/tmp)
  dockerenv+=(--env WHOAMI=$(whoami))
  dockerenv+=(--env USER=$(whoami))

  for e in ${CONTAINER_ENV_DYNAMIC["$dockerurl"]}; do
    for ee in $(env | rg "$e" | cut -d "=" -f1); do
      dockerenv+=(--env "${ee}")
    done
  done

  echo exec docker run \
    "${dockerflags[@]}" \
    $(echo ${CONTAINER_MOUNT_CMDS["$dockerurl"]} | tr "'" '"') \
    $(echo ${CONTAINER_ENV_CMDS["$dockerurl"]} | tr "'" '"') \
    "${dockerenv[@]}" \
    "$dockerurl" \
    "$@"
}

updater() {
  fetch_onyma
  fetch_config_file
}

installer() {
  local config_url="${1:-}"
  local release_channel="${2:-}"

  if [[ -z "${config_url:-}" ]]; then
    echo "Usage: ${ONYMA} install <config_url> [<release_channel>]"
    exit 1
  fi

  dependency_bootstrap
  memory_bootstrap

  update_bash_var CONFIG_URL "$config_url" "$MEMORY_FILE"
  update_bash_var RELEASE_CHANNEL "${release_channel:-production}" "$MEMORY_FILE"

  if which "$ONYMA" &>/dev/null; then
    echo "$ONYMA is already installed, exiting."
    exit 0
  fi

  fetch_onyma
  [[ -f "${OUR_DIR}/${ONYMA}.new" ]] && mv "${OUR_DIR}/${ONYMA}.new" "${OUR_BINS}/${ONYMA}"

  echo "${ONYMA} has been successfully installed to ${OUR_DIR}."
  echo "You are tracking the release_channel: [${release_channel:-production}]"
  exit 0
}

inject_into_shell() {
  ### sed "c" command will happily delete the file if its end marker isn't found, so some protection.
  head_marker="###_begin_${ONYMA}_install_block_###"
  tail_marker="###_end_${ONYMA}_install_block_###"
  injection_line="export PATH=${OUR_BINS}:\$PATH"

  ### shell detection
  if [[ "${SHELL_TARGET:-}" == "zsh" ]]; then
    shell_target="${HOME}/.zshrc"
  else
    shell_target="${HOME}/.bash_profile"
  fi

  head_marker_exists=$(grep -q "${head_marker}" "${shell_target}" && echo true || echo false)
  tail_marker_exists=$(grep -q "${tail_marker}" "${shell_target}" && echo true || echo false)
  if $head_marker_exists && $tail_marker_exists; then
    # update path injection because obviously something is screwed up
    sed -i.bak "/${head_marker}/,/${tail_marker}/c\\
  ${head_marker}\\
  ${injection_line}\\
  ${tail_marker}\\
  " "${shell_target}"
    rm "${shell_target}.bak"

  elif (! ${head_marker_exists}) && (! ${tail_marker_exists}); then
    # inject path injection because we've proably never been installed before
    echo "
  ${head_marker}
  ${injection_line}
  ${tail_marker}
  " >> "${shell_target}"
  else
    # you only have 1 head or tail marker? wtf did you do
    echo "Something is wrong."
    exit 5
  fi
}

display_help() {
  local cmd pad
  echo -e "${ONYMA}: ${DESCRIPTION:-the gitrdonr tool}\n"
  for cmd in "${!COMMAND_DESCRIPTIONS[@]}"; do
    printf '  %-20s %s\n' "${cmd}" "${COMMAND_DESCRIPTIONS["$cmd"]}"
  done
  echo
}

## 3 branches
main() {
  # 1. specifically called to do a thing
  case "${1:-}" in
    install)
      shift; installer "$@";;
    update)
      shift; updater "$@";;
  esac

  # 2. attempts at being helpful without being asked, a sin in some parts
  [[ -d "${OUR_DIR}" ]] || installer "$@"

  # 3. someones probably banging in commands like a woodpecker, warm the fires
  dependency_bootstrap
  memory_bootstrap
  operation_bootstrap

  source "$CONTROL_FILE"
  # 3a. never let someone use a dull knife
  check_update_time self || yeet ${ONYMA} update
  # 3b. and try to help em out
  dispatch_command "$@" || display_help
}

main "$@"
